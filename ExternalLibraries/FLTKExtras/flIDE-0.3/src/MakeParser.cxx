// generated by Fast Light User Interface Designer (fluid) version 1.00

#include "MakeParser.H"

NiceBrowser::NiceBrowser(int x,int y,int w,int h,const char *l=0):Fl_Hold_Browser(x,y,w,h,l) {
}

void NiceBrowser::item_draw(void* v, int x, int y, int w, int h) const {
  struct FL_BLINE {	// data is in a linked list of these
  FL_BLINE* prev;
  FL_BLINE* next;
  void* data;
  short length;		// sizeof(txt)-1, may be longer than string
  char flags;		// selected, displayed
  char txt[1];		// start of allocated array
};
const int SELECTED=1;

char* str = ((FL_BLINE*)v)->txt;
  const int* i = column_widths();

  while (w > 6) {	// do each tab-seperated field
    int w1 = w;	// width for this field
    char* e = 0; // pointer to end of field or null if none
    if (*i) { // find end of field and temporarily replace with 0
      for (e = str; *e && *e != column_char(); e++);
      if (*e) {*e = 0; w1 = *i++;} else e = 0;
    }
    int size = textsize();
    Fl_Font font = textfont();
    Fl_Color lcol = textcolor();
    Fl_Align align = FL_ALIGN_LEFT;
    // check for all the @-lines recognized by XForms:
    while (*str == format_char() && *++str && *str != format_char()) {
      switch (*str++) {
      case 'l': case 'L': size = 24; break;
      case 'm': case 'M': size = 18; break;
      case 's': size = 11; break;
      case 'b': font = (Fl_Font)(font|FL_BOLD); break;
      case 'i': font = (Fl_Font)(font|FL_ITALIC); break;
      case 'f': case 't': font = FL_COURIER; break;
      case 'c': align = FL_ALIGN_CENTER; break;
      case 'r': align = FL_ALIGN_RIGHT; break;
      case 'B': 
	  fl_color((Fl_Color)strtol(str, &str, 10));
        if (!(((FL_BLINE*)v)->flags & SELECTED)) {
	  fl_rectf(x, y, w1, h);
	}
        break;
      case 'C':
	lcol = (Fl_Color)strtol(str, &str, 10);
	break;
      case 'F':
	font = (Fl_Font)strtol(str, &str, 10);
	break;
      case 'N':
	lcol = FL_INACTIVE_COLOR;
	break;
      case 'S':
	size = strtol(str, &str, 10);
	break;
      case '-':
	fl_color(FL_DARK3);
	fl_line(x+3, y+h/2, x+w1-3, y+h/2);
	fl_color(FL_LIGHT3);
	fl_line(x+3, y+h/2+1, x+w1-3, y+h/2+1);
	break;
      case 'u':
      case '_':
	fl_color(lcol);
	fl_line(x+3, y+h-1, x+w1-3, y+h-1);
	break;
      case '.':
	goto BREAK;
      case '@':
	str--; goto BREAK;
      }
    }
  BREAK:
    fl_font(font, size);
    if (!active_r()) lcol = inactive(lcol);
    if (((FL_BLINE*)v)->flags & SELECTED)
      lcol = contrast(lcol, selection_color());
    fl_color(lcol);
    fl_draw(str, x+3, y, w1-6, h, e ? Fl_Align(align|FL_ALIGN_CLIP) : align);
    if (!e) break; // no more fields...
    *e = column_char(); // put the seperator back
    x += w1;
    w -= w1;
    str = e+1;
  }
}

inline void MakeParser::cb_mPrevError_i(Fl_Button*, void*) {
  PrevErrorMsg();
}
void MakeParser::cb_mPrevError(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mPrevError_i(o,v);
}

inline void MakeParser::cb_mNextError_i(Fl_Button*, void*) {
  NextErrorMsg();
}
void MakeParser::cb_mNextError(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mNextError_i(o,v);
}

inline void MakeParser::cb_mPrevWarning_i(Fl_Button*, void*) {
  PrevWarningMsg();
}
void MakeParser::cb_mPrevWarning(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mPrevWarning_i(o,v);
}

inline void MakeParser::cb_mNextWarning_i(Fl_Button*, void*) {
  NextWarningMsg();
}
void MakeParser::cb_mNextWarning(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mNextWarning_i(o,v);
}

inline void MakeParser::cb_mMakeButton_i(Fl_Button*, void*) {
  Make();
}
void MakeParser::cb_mMakeButton(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mMakeButton_i(o,v);
}

inline void MakeParser::cb_mMakeCleanButton_i(Fl_Button*, void*) {
  MakeClean();
}
void MakeParser::cb_mMakeCleanButton(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mMakeCleanButton_i(o,v);
}

inline void MakeParser::cb_mStopButton_i(Fl_Button*, void*) {
  StopMake();
}
void MakeParser::cb_mStopButton(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mStopButton_i(o,v);
}

inline void MakeParser::cb_mRunButton_i(Fl_Button*, void*) {
  Run();
}
void MakeParser::cb_mRunButton(Fl_Button* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->user_data()))->cb_mRunButton_i(o,v);
}

inline void MakeParser::cb_mErrorBrowser_i(NiceBrowser*, void*) {
  SelectErrorLine();
}
void MakeParser::cb_mErrorBrowser(NiceBrowser* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->parent()->user_data()))->cb_mErrorBrowser_i(o,v);
}

inline void MakeParser::cb_mRunTargetsBrowser_i(NiceBrowser*, void*) {
  if(Fl::event_button()==1)  Run();
else if(Fl::event_button()==3) ChangeRunTargetsParams();
}
void MakeParser::cb_mRunTargetsBrowser(NiceBrowser* o, void* v) {
  ((MakeParser*)(o->parent()->parent()->parent()->user_data()))->cb_mRunTargetsBrowser_i(o,v);
}

MakeParser::MakeParser() {
  Fl_Group* w;
  { Fl_Group* o = new Fl_Group(0, 0, 502, 152);
    w = o;
    o->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(210, 115, 145, 20, "label");
      o->hide();
    }
    { Fl_Group* o = mLeftMakeMenu = new Fl_Group(3, 27, 20, 120);
      { Fl_Button* o = mPrevError = new Fl_Button(3, 27, 20, 20, "@-38->");
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_SYMBOL_LABEL);
        o->labelcolor(1);
        o->callback((Fl_Callback*)cb_mPrevError, (void*)(this));
      }
      { Fl_Button* o = mNextError = new Fl_Button(3, 47, 20, 20, "@-32->");
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_SYMBOL_LABEL);
        o->labelcolor(1);
        o->callback((Fl_Callback*)cb_mNextError, (void*)(this));
      }
      { Fl_Button* o = mPrevWarning = new Fl_Button(3, 75, 20, 20, "@-38->");
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_SYMBOL_LABEL);
        o->labelcolor(4);
        o->callback((Fl_Callback*)cb_mPrevWarning, (void*)(this));
      }
      { Fl_Button* o = mNextWarning = new Fl_Button(3, 95, 20, 20, "@-32->");
        o->box(FL_THIN_UP_BOX);
        o->labeltype(FL_SYMBOL_LABEL);
        o->labelcolor(4);
        o->callback((Fl_Callback*)cb_mNextWarning, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(3, 118, 20, 5);
        Fl_Group::current()->resizable(o);
      }
      o->end();
    }
    { Fl_Group* o = mTopMakeMenu = new Fl_Group(3, 3, 491, 20);
      { Fl_Button* o = mMakeButton = new Fl_Button(3, 3, 55, 20, "&Make");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mMakeButton, (void*)(this));
      }
      { Fl_Button* o = mMakeCleanButton = new Fl_Button(61, 3, 90, 20, "Make Clean");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mMakeCleanButton, (void*)(this));
      }
      { Fl_Button* o = mStopButton = new Fl_Button(154, 3, 67, 20, "&Stop Make");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mStopButton, (void*)(this));
      }
      { Fl_Button* o = mRunButton = new Fl_Button(224, 3, 55, 20, "&Run");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_mRunButton, (void*)(this));
      }
      { Fl_Box* o = new Fl_Box(448, 3, 45, 17);
        Fl_Group::current()->resizable(o);
      }
      o->end();
    }
    { Fl_Tabs* o = mTabbedOutput = new Fl_Tabs(24, 27, 474, 121);
      o->selection_color(52);
      { Fl_Group* o = mErrorTab = new Fl_Group(26, 30, 468, 102, "Messages");
        o->labelsize(11);
        { NiceBrowser* o = mErrorBrowser = new NiceBrowser(26, 30, 468, 101);
          o->type(2);
          o->box(FL_THIN_DOWN_BOX);
          o->labelsize(12);
          o->textfont(4);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_mErrorBrowser);
          o->when(3);
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = mRunTab = new Fl_Group(26, 30, 470, 102, "RunTargets");
        o->labelsize(11);
        o->align(FL_ALIGN_BOTTOM);
        o->when(FL_WHEN_CHANGED);
        o->hide();
        { NiceBrowser* o = mRunTargetsBrowser = new NiceBrowser(26, 30, 468, 101);
          o->type(2);
          o->box(FL_THIN_DOWN_BOX);
          o->labelsize(12);
          o->textfont(4);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_mRunTargetsBrowser);
          o->when(3);
          Fl_Group::current()->resizable(o);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    mMainGroup=o;
    o->end();
  }
  mMainGroup->resizable(mTabbedOutput);
}

Fl_Group* MakeParser::Preferences() {
  Fl_Group* w;
  { Fl_Group* o = new Fl_Group(0, 0, 248, 100);
    w = o;
    o->user_data((void*)(this));
    { Fl_Input* o = new Fl_Input(3, 17, 240, 25, "Make Parameters:");
      o->box(FL_THIN_DOWN_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->user_data((void*)(&mMakeArgs));
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->end();
  }
  return w;
}
//------------------
//------------------
//------------------
//------------------
//------------------
//------------------
//----- -------------
